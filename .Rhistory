spUnits <- shapefile("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/pspuRas2.tif")
#read in spatial . We will want to make these ourselves eventually by intersecting Admin and Ecozones, matching field to table.
# spUnits <- shapefile("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/pspu.shp")
# abovedefinitely not spatial unit ids. values = 90026-90020.....
spUnits <- raster("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/pspuRas2.tif")
spUnits <- project(spUnits, proj = age@crs)
spUnits <- raster::projection(project(spUnits, proj = age@crs)
spUnits <- raster::projection(spUnits, proj = age@crs)
spUnits <- raster::projection(spUnits, proj = age@crs)
spUnits <- raster::projectRaster(spUnits, proj = age@crs)
spUnits <- raster::projectRaster(spUnits, crs = age@crs)
spUnits_sa <- raster::crop(spUnits, y = age)
plot(spUnits_sa)
spUnits_sa@crs
age@crs
spUnits <- raster::crop(spUnits, y = age)
#Clip to study area
rm(spUnits_sa)
outSim@.envir$cbmData@disturbanceEvents
outSim@.envir$cbmData@
# THESE THREE CAN BE GOTTEN FROM THE spatial_unit_id:
# sim$historicDMIDs#### <- c(214)#,1,1,1)
# sim$lastPassDMIDS#### <- c(214)#,1,1,1)
# sim$returnIntervals#### <- c(200)#,110,120,130)
# THESE CAN BE SET TO 0 (i.e., no regeneration dealy):
# sim$delays <- c(0)#,0,0,0)
# SET TO THE DEAFULTS OF 10 and 30:
# sim$minRotations <- rep(0, sim$nStands)
# sim$maxRotations <- rep(100, sim$nStands)
# WHICH SPATIAL UNITS WILL BE DETERMINED MY THE INTERSECTION OF admin_boudary and ecozone
# THESE TABLES ARE IN cbm_defaults (cbmTables readInSQLiteData.r). but it might also be in this raster:
test <- raster("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/pspuRas2.tif")
outSim@.envir$cbmData@spuIndices
outSim@.envir$cbmData@landclasses
outSim@.envir$cbmData@biomassToCarbonRate
outSim@.envir$cbmData@classifierValues
outSim@.envir$cbmData@disturbanceMatrixAssociation
# THESE THREE CAN BE GOTTEN FROM THE spatial_unit_id:
distID <- raster(spUnits)
temptable <- outSim@.envir$cbmData@disturbanceMatrixAssociation
temptable <- outSim@.envir$cbmData@disturbanceMatrixAssociation
names(temptable) <- names(outSim@.envir$cbmData@disturbanceMatrixAssociation)
class(temptable)
unique(temptable["spatial_unit_id"])
unique(temptable[,c("spatial_unit_id")])
length(temptable[,c("spatial_unit_id")])
temptable1 <- outSim@.envir$cbmData@disturbanceMatrix
# sim$historicDMIDs#### <- c(214)#,1,1,1)
# sim$lastPassDMIDS#### <- c(214)#,1,1,1)
# sim$returnIntervals#### <- c(200)#,110,120,130)
plot(temptable1)
# sim$historicDMIDs#### <- c(214)#,1,1,1)
# sim$lastPassDMIDS#### <- c(214)#,1,1,1)
# sim$returnIntervals#### <- c(200)#,110,120,130)
temptable1
temptable1 <- outSim@.envir$cbmData@disturbanceMatrixValues
names(temptable1)
head(temptable1)
head(temptable)
#----------------------------------------------
# Figure out the spatial info
# starting with the info from the init event in
# the spadesCBMinputs module
#
# CBoisvenue April 9th, 2018
#----------------------------------------------
# the only data that truly needs to be spatial are the ages and the distrubance events. All other
# info can be calculated or linked back to where the pixels are. This only works in Canada
# Notes on where/how each of these needs to be calculated.
#### AGES####
# from a raster
# sim$ages <- c(0)#,2,3,140) # this will come from a raster
# TASK: READ-IN RASTER
# this should be age in 1984:
library(raster)
age <- raster("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/age1_recliner.tif")
#IE: I will use the recliner files because they are smaller and easier to work with.
casfri <- raster("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/age1CASFRI.tif")
#CB: is this the same?
#IE: age1 is 3 years younger than age1casfri, almost everywhere. Likely different years from CASFRI?
## TASK1: CALCULATE THESE FROM THE NUMBER OF PIXELS IN THE ABOVE AGE RASTER
# sim$nStands ####<- length(sim$ages) # this will come from the number of pixels in the raster above that have ages
nStands <- ncell(age)
# standIdx ####<- 1:sim$nStands
standIDx <- 1:nStands
#THIS NEEDS TO LINK A GROWTH CRUVE TO EACH STAND/PIXEL
# for now...make this work with scott's tables...
# need to a vector of gcids for each stand/pixel
# TASK2: intersect the two rasters that determine growth curve:
#casfri_dom2.tif
#site_productivity.tif
dom <- raster("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/casfri_dom2_recliner.tif")
siteprod <- raster("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/site_productivity_recliner.tif")
adminBoundaries <- shapefile("C:/Ian/Global GIS/Can_pol_boundaries/boundary_p_v2/boundary_l_v2.shp")
#source http://ftp.geogratis.gc.ca/pub/nrcan_rncan/vector/framework_cadre/North_America_Atlas10M/boundaries/
can <- adminBoundaries[adminBoundaries$COUNTRY == "CAN",]
ecozones <- shapefile("C:/Ian/Global GIS/Ecozones/ecozones.shp") #source http://sis.agr.gc.ca/cansis/nsdb/ecostrat/gis_data.html
#get into same coordinate system
canAdmin <- spTransform(can, CRSobj = ecozones@proj4string)
#read in spatial . We will want to make these ourselves eventually by intersecting Admin and Ecozones, matching field to table.
# spUnits <- shapefile("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/pspu.shp")
# spUnits <- spTransform(spUnits, CRSobj = age@crs)
# abovedefinitely not spatial unit ids. values = 90026-90020.....
spUnits <- raster("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/pspuRas2.tif")
spUnits <- raster::crop(spUnits, y = age)
#Clip to study area
outSim@.envir$cbmData@disturbanceMatrixAssociation
#get the following from spUnits Raster
distID <- raster(spUnits)
temp <- getValues(distID)
temptable <- outSim@.envir$cbmData@disturbanceMatrixAssociation
temptable1 <- outSim@.envir$cbmData@disturbanceMatrixValues
length(temptable[,c("spatial_unit_id")])
moduleDir <- file.path("C:/Ian/Boisvenue/spadesCBM")
inputDir <- file.path(moduleDir, "inputs")
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
setPaths(inputPath = inputDir,
modulePath = moduleDir,
outputPath = outputDir,
cachePath = cacheDir)
getPaths()
times <- list(start = 0, end = 10)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("spadesCBMdefaults")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
outSim <- spades(mySim
library(igraph)
library(SpaDES.core)
moduleDir <- file.path("C:/Ian/Boisvenue/spadesCBM")
inputDir <- file.path(moduleDir, "inputs")
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
setPaths(inputPath = inputDir,
modulePath = moduleDir,
outputPath = outputDir,
cachePath = cacheDir)
getPaths()
times <- list(start = 0, end = 10)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("spadesCBMdefaults")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
outSim <- spades(mySim)
```
outSim@.envir$cbmData@disturbanceMatrixAssociation
#get the following from spUnits Raster
distID <- raster(spUnits)
temp <- getValues(distID)
temptable <- outSim@.envir$cbmData@disturbanceMatrixAssociation
temptable1 <- outSim@.envir$cbmData@disturbanceMatrixValues
length(temptable[,c("spatial_unit_id")])
names(temptable) <- names(outSim@.envir$cbmData@disturbanceMatrixAssociation)
gcComponent <- as.matrix(read.csv("C:/Ian/Boisvenue/spadesCBM/spadesCBMinputs/data/SK_ReclineRuns30m/LookupTables/yieldComponentRCBM.csv"))
gcIn <- as.matrix(read.csv("C:/Ian/Boisvenue/spadesCBM/spadesCBMinputs/data/SK_ReclineRuns30m/LookupTables/yieldRCBM.csv"))
## here trying to match the spatial_unit_id in gcIn with the spatial_unit in cbm_defaults
# run readInSQLiteData.r which creates the data.frame spu (combines all ids with province and ecozone names)
# figure out what spatial_unit these gc are in with the matching of
# gcIn$spatial_unit_id and cbmTables$spatial_unit
#x <- which(spu$spu_id %in% unique(gcIn[,1]))
gcSpu <- spu[which(spu$spu_id %in% unique(gcIn[,1])),]
#get the following from spUnits Raster: gcID, disturbance????
plot(spUnits)
temptable <- outSim@.envir$cbmData@disturbanceMatrixAssociation
temptable1 <- outSim@.envir$cbmData@disturbanceMatrixValues
temptable1
temptable
outSim@.envir$processes$disturbanceMatrices
outSim@.envir$cbmData@spinupParameters
# THE DISTURBANCE EVENTS ARE HERE:
projchange <- raster("SK_ReclineRuns30m\layers\projected_change_type")
# THE DISTURBANCE EVENTS ARE HERE:
projchange <- raster("C:/Ian/Boisvenue/forIan/SK_ReclineRuns30m\layers\projected_change_type")
# THE DISTURBANCE EVENTS ARE HERE:
projchange <- raster("C:/Ian/Boisvenue/forIan/SK_ReclineRuns30m/layers/projected_change_type")
# THE DISTURBANCE EVENTS ARE HERE:
projchange <- raster("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/projected_change_type")
# THE DISTURBANCE EVENTS ARE HERE:
projchange <- raster("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/projected_change_type/dist1985.tif")
# THE DISTURBANCE EVENTS ARE HERE:
projchange85 <- raster("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/projected_change_type/dist1985.tif")
plot(projchange85)
raslist <- list.files(path = "C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/projected_change_type/", pattern = "tif")
raslist <- list.files(path = "C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/projected_change_type/", pattern = "tif$")
raslist1 <- lapply(raslist, FUN = function(x, age) {
cropras <- raster::crop(x, y = age)
return(cropras)
} )
raslist1 <- lapply(raslist, FUN = function(x, age = age) {
cropras <- raster::crop(x, age = age)
return(cropras)
} )
raslist1 <- lapply(raslist, FUN = function(x, age = age) {
browser()
cropras <- raster::crop(x, age = age)
return(cropras)
} )
raslist1 <- lapply(raslist, FUN = function(x, extent = age) {
browser()
cropras <- raster::crop(x, extent)
return(cropras)
} )
age
cropras <- raster::crop(x, extent)
raslist1 <- lapply(raslist, FUN = function(x, shr = age) {
cropras <- raster::crop(x, y = extent(shr))
return(cropras)
} )
raslist1 <- lapply(raslist, FUN = function(x, shr = age) {
browser()
cropras <- raster::crop(x, y = extent(shr))
return(cropras)
} )
extent(shr)
cropras <- raster::crop(x, y = extent(shr))
raslist1 <- lapply(raslist, FUN = function(x, shr = age) {
browser()
cropras <- raster::crop(raster(x), y = extent(shr))
return(cropras)
} )
raster(x)
raslist <- list.files(path = "C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/projected_change_type/", pattern = "tif$")
raslist1 <- lapply(raslist, FUN = function(x, shr = age) {
browser()
cropras <- raster::crop(raster(x), y = extent(shr))
return(cropras)
} )
age
extent(shr)
y = extent(shr)
raster(x)
raslist <- list.files(path = "C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/projected_change_type/", pattern = "tif$", full.names = TRUE)
raslist1 <- lapply(raslist, FUN = function(x, shr = age) {
browser()
cropras <- raster::crop(raster(x), y = extent(shr))
return(cropras)
} )
raslist1 <- lapply(raslist, FUN = function(x, shr = age) {
cropras <- raster::crop(raster(x), y = extent(shr))
return(cropras)
} )
rasstack <- raster:;stack(raslist1)
rasstack <- raster::stack(raslist1)
plot(rasstack)
plot(c(rasstack$dist1985, rasstack$dist1986, rasstack$dist2007))
plot(rasstack$dist2008)
plot(age)
library(igraph)
library(SpaDES.core)
moduleDir <- file.path("C:/Celine/GitHub/spadesCBM")
inputDir <- file.path(moduleDir, "inputs") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
times <- list(start = 0, end = 10)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("spadesCBMinputs")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
outSim <- spades(mySim)
outSim@.envir$cbmData@spatialUnitIds
outSim@.envir$cbmData@spuIndices
outSim@.envir$cbmData@disturbanceMatrixAssociation
outSim@.envir$cbmData@disturbanceMatrix
outSim@.envir$cbmData@disturbanceMatrixValues
library(RSQLite)
inputDir <- file.path("C:/Celine/GitHub/data/12_Spades_run")
dbPath = file.path(inputDir,"cbm_defaults","cbm_defaults.db")
sqlite.driver <- dbDriver("SQLite")
cbmDefaults <- dbConnect(sqlite.driver,
dbname = dbPath)
alltables = dbListTables(cbmDefaults)
cbmTables <- list()
for(i in 1:length(alltables)){
cbmTables[[i]] <- dbReadTable(cbmDefaults,alltables[i])
}
names(cbmTables) <- alltables
# make table to check/look-up annoying spatial_unit_id admin and eco boundaries
adminNames <- cbmTables$admin_boundary
names(adminNames) <- c("admin_boundary_id","stump_parameter_id","name")
ecoNames <- cbmTables$eco_boundary
names(ecoNames) <- c("eco_boundary_id","stump_parameter_id","name")
spuNames <- merge(adminNames,cbmTables$spatial_unit,by="admin_boundary_id")
names(spuNames) <- c("admin_boundary_id","stump_parameter_id", "province","id",
"eco_boundary_id","root_parameter_id", "climate_time_series_id","spinup_parameter_id")
spuNames1 <- merge(ecoNames,spuNames,by="eco_boundary_id")
names(spuNames1) <- c("eco_boundary_id","stump_parameter_id.x","ecozone","admin_boundary_id","stump_parameter_id.y",
"province","spu_id","root_parameter_id", "climate_time_series_id","spinup_parameter_id")
spu <- spuNames1[,c(7,4,6,1,3,5,8,9,10)]
spu <- spu[order(spu$spu_id),]
# make table to be able to check species_id, forest_id, and genus_id
sps <- cbmTables$species
names(sps) <- c("species_id","species","forest_type_id","genus_id")
forests <- cbmTables$forest_type
names(forests) <- c("forest_type_id","forest")
sps <- merge(sps,forests,by="forest_type_id")
genus <- cbmTables$genus
names(genus) <- c("genus_id","genus")
sps <- merge(sps,genus,by="genus_id")
sps <- sps[,c(3,4,2,5,1,6)]
inputDir <- file.path("C:/Celine/GitHub/data/12_Spades_run")
dbPath = file.path(inputDir,"cbm_defaults","cbm_defaults.db")
sqlite.driver <- dbDriver("SQLite")
cbmDefaults <- dbConnect(sqlite.driver,
dbname = dbPath)
alltables = dbListTables(cbmDefaults)
cbmTables <- list()
cbmDefaults <- dbConnect(sqlite.driver,
dbname = dbPath)
inputDir <- file.path("C:/Ian/Boisvenue/spadesCBM/data/12_Spades_run/")
dbPath = file.path(inputDir,"cbm_defaults","cbm_defaults.db")
sqlite.driver <- dbDriver("SQLite")
cbmDefaults <- dbConnect(sqlite.driver,
dbname = dbPath)
cbmDefaults <- dbConnect(sqlite.driver,
dbname = dbPath)
dbPath = file.path(inputDir,"cbm_defaults","cbm_defaults.db")
dbpath
dbPath
sqlite.driver <- dbDriver("SQLite")
cbmDefaults <- dbConnect(sqlite.driver,
dbname = dbPath)
gcComponent <- as.matrix(read.csv("C:/Ian/Boisvenue/spadesCBM/spadesCBMinputs/data/SK_ReclineRuns30m/LookupTables/yieldComponentRCBM.csv"))
gcIn <- as.matrix(read.csv("C:/Ian/Boisvenue/spadesCBM/spadesCBMinputs/data/SK_ReclineRuns30m/LookupTables/yieldRCBM.csv"))
?raster::predict
logo <- brick(system.file("external/rlogo.grd", package="raster"))
library(raster)
# example data. See ?raster::predict
logo <- brick(system.file("external/rlogo.grd", package="raster"))
logo
plot(logo)
p <- matrix(c(48, 48, 48, 53, 50, 46, 54, 70, 84, 85, 74, 84, 95, 85,
66, 42, 26, 4, 19, 17, 7, 14, 26, 29, 39, 45, 51, 56, 46, 38, 31,
22, 34, 60, 70, 73, 63, 46, 43, 28), ncol=2)
p
a <- matrix(c(22, 33, 64, 85, 92, 94, 59, 27, 30, 64, 60, 33, 31, 9,
99, 67, 15, 5, 4, 30, 8, 37, 42, 27, 19, 69, 60, 73, 3, 5, 21,
37, 52, 70, 74, 9, 13, 4, 17, 47), ncol=2)
a
cbind(1, p)
cbind(0, a)
xy <- rbind(cbind(1, p), cbind(0, a))
xy
v <- data.frame(cbind(pa=xy[,1], extract(logo, xy[,2:3])))
v
v$Year <- sample(2000:2001, nrow(v), replace=TRUE)
v
library(lme4)
m <- lmer(pa ~ red + blue + (1 | Year), data=v)
summary(m)
x <- predict(logo, m, const=(data.frame(Year=2000)))
plot(x)
getwd()
inputDir <- file.path("data/12_Spades_run")
dbPath = file.path(inputDir,"cbm_defaults","cbm_defaults.db")
library(RSQLite)
file.exists("database.sqlite")
file.exists("cbm_defaults.sqlite")
inputDir <- file.path("data/12_Spades_run")
dbPath = file.path(inputDir,"cbm_defaults","cbm_defaults.db")
file.exists("data/cbm_defaults/cbm_defaults.db")
file.exists("data/cbm_defaults/cbm_defaults.sqlite")
library(RSQLite)
inputDir <- file.path("data/12_Spades_run")
dbPath = file.path(inputDir,"cbm_defaults","cbm_defaults.db")
sqlite.driver <- dbDriver("SQLite")
cbmDefaults <- dbConnect(sqlite.driver,
dbname = dbPath)
library(raster)
age <- raster("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/age1_recliner.tif")
casfri <- raster("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/age1CASFRI.tif")
#CB: is this the same?
#IE: age1 is 3 years younger than age1casfri, almost everywhere. Likely different years from CASFRI?
## TASK1: CALCULATE THESE FROM THE NUMBER OF PIXELS IN THE ABOVE AGE RASTER
# sim$nStands ####<- length(sim$ages) # this will come from the number of pixels in the raster above that have ages
#IE: we can get this from the raster function ncell
nStands <- raster::ncell(age)
# standIdx ####<- 1:sim$nStands
standIDx <- 1:nStands
#THIS NEEDS TO LINK A GROWTH CRUVE TO EACH STAND/PIXEL
# for now...make this work with scott's tables...
# need to a vector of gcids for each stand/pixel
# TASK2: intersect the two rasters that determine growth curve:
#casfri_dom2.tif
#site_productivity.tif
#IE: I should put these in the data folder so path names can be relative
dom <- raster("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/casfri_dom2_recliner.tif")
siteprod <- raster("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/site_productivity_recliner.tif")
adminBoundaries <- shapefile("C:/Ian/Global GIS/Can_pol_boundaries/boundary_p_v2/boundary_l_v2.shp")
#source http://ftp.geogratis.gc.ca/pub/nrcan_rncan/vector/framework_cadre/North_America_Atlas10M/boundaries/
can <- adminBoundaries[adminBoundaries$COUNTRY == "CAN",]
ecozones <- shapefile("C:/Ian/Global GIS/Ecozones/ecozones.shp") #source http://sis.agr.gc.ca/cansis/nsdb/ecostrat/gis_data.html
adminBoundaries <- shapefile("C:/Ian/GIS/Can_pol_boundaries/boundary_p_v2/boundary_l_v2.shp")
can <- adminBoundaries[adminBoundaries$COUNTRY == "CAN",]
ecozones <- shapefile("C:/Ian/Global GIS/Ecozones/ecozones.shp") #source http://sis.agr.gc.ca/cansis/nsdb/ecostrat/gis_data.html
#get into same coordinate system
canAdmin <- spTransform(can, CRSobj = ecozones@proj4string)
ecozones <- shapefile("C:/Ian/GIS/Ecozones/ecozones.shp") #source http://sis.agr.gc.ca/cansis/nsdb/ecostrat/gis_data.html
ecozones <- shapefile("C:/Ian/GIS/Canada Ecosystem/Ecozones/ecozones.shp") #source http://sis.agr.gc.ca/cansis/nsdb/ecostrat/gis_data.html
#read in spatial . We will want to find a spatial units layer for all of Canada
spUnits <- shapefile("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/pspu.shp")
spUnits$EcoBoundar
spUnits$ProvinceID
plot(spUnits)
#Using just Saskatchewan area for now
spUnits <- raster("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/pspuRas2.tif")
plot(spUnits)
#read in spatial . We will want to find a spatial units layer for all of Canada
spUnits_Can <- shapefile("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/pspu.shp")
spUnits_Can <- spTransform(spUnits, CRSobj = age@crs)
#read in spatial . We will want to find a spatial units layer for all of Canada
spUnits_Can <- shapefile("C:/Ian/Boisvenue/forIan/SK_data/SK_ReclineRuns30m/layers/pspu.shp")
moduleDir <- file.path("C:/Ian/Boisvenue/spadesCBM/")
inputDir <- file.path(moduleDir, "inputs") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
getwd()
moduleDir <- ("")
moduleDir
moduleDir <- ("spadesCBMinputs")
moduleDir <- file.path("C:/Ian/Boisvenue/spadesCBM/")
inputDir <- file.path(moduleDir, "inputs") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
library(igraph)
library(SpaDES.core)
moduleDir <- file.path("C:/Ian/Boisvenue/spadesCBM/")
inputDir <- file.path(moduleDir, "inputs") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
times <- list(start = 0, end = 10)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("spadesCBMinputs")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
outSim <- spades(mySim)
outSim@.envir$cbmData@disturbanceMatrixAssociation
oduleDir <- file.path("C:/Ian/Boisvenue/spadesCBM")
inputDir <- file.path(moduleDir, "inputs")
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
setPaths(inputPath = inputDir,
modulePath = moduleDir,
outputPath = outputDir,
cachePath = cacheDir)
getPaths()
times <- list(start = 0, end = 10)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("spadesCBMdefaults")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
outSim <- spades(mySim)
#Result of running SpadesCBMdefaults
outSim@.envir$cbmData@disturbanceMatrixAssociation
