outputPath = outputDir
)
dispSim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
dispSimOut <- spades(dispSim, debug = TRUE)
library(igraph)
library(SpaDES.core)
moduleDir <- file.path("C:/Celine/spadesWorkshopFeb2018")
inputDir <- file.path(moduleDir, "inputs") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
times <- list(start = 0, end = 10)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
disp = list(Nsource = 50, establishThresh = 0.05)
#module1 = list(param1 = value1, param2 = value2),
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("disp")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
dispSim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
dispSimOut <- spades(dispSim, debug = TRUE)
ls(dispSimOut)
?initiateAgents
library(igraph)
library(SpaDES.core)
moduleDir <- file.path("C:/Celine/spadesWorkshopFeb2018")
inputDir <- file.path(moduleDir, "inputs") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
times <- list(start = 0, end = 10)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
#disp = list(Nsource = 50, establishThresh = 0.05)
#module1 = list(param1 = value1, param2 = value2),
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("disp")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
dispSim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
dispSimOut <- spades(dispSim, debug = TRUE)
library(igraph)
library(SpaDES.core)
moduleDir <- file.path("C:/Celine/spadesWorkshopFeb2018")
inputDir <- file.path(moduleDir, "inputs") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
times <- list(start = 0, end = 10)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
#disp = list(Nsource = 50, establishThresh = 0.05)
#module1 = list(param1 = value1, param2 = value2),
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("disp")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
dispSim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
dispSimOut <- spades(dispSim, debug = TRUE)
library(igraph)
library(SpaDES.core)
moduleDir <- file.path("C:/Celine/spadesWorkshopFeb2018")
inputDir <- file.path(moduleDir, "inputs") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
times <- list(start = 0, end = 10)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
#disp = list(Nsource = 50, establishThresh = 0.05)
#module1 = list(param1 = value1, param2 = value2),
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("disp")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
dispSim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
dispSimOut <- spades(dispSim, debug = TRUE)
library(igraph)
library(SpaDES.core)
moduleDir <- file.path("C:/Celine/spadesWorkshopFeb2018")
inputDir <- file.path(moduleDir, "inputs") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
times <- list(start = 0, end = 10)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
#disp = list(Nsource = 50, establishThresh = 0.05)
#module1 = list(param1 = value1, param2 = value2),
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("disp")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
dispSim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
dispSimOut <- spades(dispSim, debug = TRUE)
library(igraph)
library(SpaDES.core)
moduleDir <- file.path("C:/Celine/spadesWorkshopFeb2018")
inputDir <- file.path(moduleDir, "inputs") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
times <- list(start = 0, end = 10)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
#disp = list(Nsource = 50, establishThresh = 0.05)
#module1 = list(param1 = value1, param2 = value2),
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("disp")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
dispSim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
dispSimOut <- spades(dispSim, debug = TRUE)
9.3-4.4
9.3-5.8
5.8-2.7
9.3+4.4
5.8+2.7
5.8-4.9
library(SpaDES)
moduleDir <- file.path("C:/Celine/GitHub/spadesCBM")
inputDir <- file.path("C:/Celine/GitHub/data/12_Spades_run") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path("C:/Celine/SpaDEScacheOutputs/outputs")
cacheDir <- file.path("C:/Celine/SpaDEScacheOutputs/cache")
times <- list(start = 1990.00, end = 1999.00)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
spadesCBMcore = list(.useCache = c(".inputObjects", "init")),
spadesCBMinputs = list(.useCache = c(".inputObjects")),
spadesCBMdefaults = list(.useCache = c(".inputObjects"))
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("spadesCBM")
objects <- list(
dbPath = file.path(inputDir,"cbm_defaults","cbm_defaults.db"),
sqlDir = file.path(inputDir,"cbm_defaults")
)
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
spadesCBMSim <- simInit(times = times, params = parameters,
modules = modules,
objects = objects, paths = paths)
spadesCBMout <- spades(spadesCBMSim,debug=TRUE)
r <- raster(nrows = 100, ncols = 100, xmn = -50, xmx = 50, ymn = -50, ymx = 50)
library(raster)
r <- raster(nrows = 100, ncols = 100, xmn = -50, xmx = 50, ymn = -50, ymx = 50)
abundance_model <- function(r, Time) {
abund_outputs <- list()
for(t in 1:Time) {
abund_outputs[[t]] <- SpaDES.tools::gaussMap(r, scale = 100, var = 0.03)
}
return(abund_outputs)
}
Time <- 10
abundance <- abundance_model(r = r, Time = Time)
plot(stack(abundance))
temp_model <- function(r, Time) {
temp_outputs <- list()
for(t in 1:Time) {
temp_outputs[[t]] <- SpaDES.tools::gaussMap(r, scale = 100, var = 0.1)
}
return(temp_outputs)
}
temperature <- temp_model(r = r, Time = Time)
plot(stack(temperature))
stats_analysis <- function(Data){
lm1 <- lm(abund ~ temp, data = Data)
plot(Data$abund ~ Data$temp, xlab = "Temperature", ylab = "Species abundance")
abline(a = lm1$coefficients["(Intercept)"], b = lm1$coefficients["temp"], lwd = 2, col = "blue")
}
stats_analysis <- function(Data){
if(all(c("abund","temp") %in% colnames(Data))){
lm1 <- lm(abund ~ temp, data = Data)
plot(Data$abund ~ Data$temp, xlab = "Temperature", ylab = "Species abundance")
abline(a = lm1$coefficients["(Intercept)"], b = lm1$coefficients["temp"], lwd = 2, col = "blue")
} else{
stop("Data must contain 'abund' and 'temps' columns")
}
}
for(t in 1:Time){
outputdata <- data.frame(abund = abundance[[t]][], temp = temperature[[t]][])
stats_analysis(Data = outputdata)
}
temperature <- temp_model(r = r, Time = Time)
plot(stack(temperature))
for(t in 1:Time){
outputdata <- data.frame(abund = abundance[[t]][], temp = temperature[[t]][])
stats_analysis(Data = outputdata)
}
par(mfrow = c(2,5))
for(t in 1:Time){
outputdata <- data.frame(abund = abundance[[t]][], temp = temperature[[t]][])
stats_analysis(Data = outputdata)
}
library(SpaDES)
newModule(speciesAbundance)
SpaDES.addins:::addin_newModule()
file.edit('C:/Celine/spadesWorkshopFeb2018/speciesAbundance/speciesAbundance.R')
file.edit('C:/Celine/spadesWorkshopFeb2018/speciesAbundance/speciesAbundance.Rmd')
library(igraph)
library(SpaDES.core)
moduleDir <- file.path("C:/Celine/spadesWorkshopFeb2018")
inputDir <- file.path(moduleDir, "inputs") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
times <- list(start = 0, end = 10)
library(igraph)
library(SpaDES.core)
moduleDir <- file.path("C:/Celine/spadesWorkshopFeb2018")
inputDir <- file.path(moduleDir, "inputs") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
times <- list(start = 0, end = 10)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("speciesAbundance")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
library(igraph)
library(SpaDES.core)
moduleDir <- file.path("C:/Celine/spadesWorkshopFeb2018")
inputDir <- file.path(moduleDir, "inputs") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
times <- list(start = 0, end = 10)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("speciesAbundance")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
spades(mySim)
library(igraph)
library(SpaDES.core)
moduleDir <- file.path("C:/Celine/spadesWorkshopFeb2018")
inputDir <- file.path(moduleDir, "inputs") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
times <- list(start = 0, end = 10)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("speciesAbundance")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
spades(mySim)
sim$r
SpaDES.addins:::addin_newModule()
file.edit('C:/Celine/spadesWorkshopFeb2018/temperature/temperature.R')
library(igraph)
library(SpaDES.core)
moduleDir <- file.path("C:/Celine/spadesWorkshopFeb2018")
inputDir <- file.path(moduleDir, "inputs") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
times <- list(start = 0, end = 10)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("speciesAbundance")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
spades(mySim)
SpaDES.addins:::addin_newModule()
SpaDES.addins:::addin_newModule()
file.edit('C:/Celine/spadesWorkshopFeb2018/speciesTempLM/speciesTempLM.R')
?do.call
library(igraph)
library(SpaDES.core)
moduleDir <- file.path("C:/Celine/spadesWorkshopFeb2018")
inputDir <- file.path(moduleDir, "inputs") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
modules <- list("speciesAbundance", "temperature", "speciesTempLM")
## Set simulation and module parameters
times <- list(start = 1.0, end = 10.1, timeunit = "year")
parameters <- list(
.globals = list(simulationTimeStep = 1, .plotInitialTime = 1.5),
speciesTempLM = list(statsTimestep = 5)
)
## make a list of directory paths
paths <- getPaths()
## Simulation setup
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
simOut <- spades(mySim)
library(igraph)
library(SpaDES.core)
moduleDir <- file.path("C:/Celine/spadesWorkshopFeb2018")
inputDir <- file.path(moduleDir, "inputs") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
modules <- list("speciesAbundance", "temperature", "speciesTempLM")
## Set simulation and module parameters
times <- list(start = 1.0, end = 10.1, timeunit = "year")
parameters <- list(
.globals = list(simulationTimeStep = 1, .plotInitialTime = 1.5),
speciesTempLM = list(statsTimestep = 5)
)
## make a list of directory paths
paths <- getPaths()
## Simulation setup
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
simOut <- spades(mySim)
library(igraph)
library(SpaDES.core)
moduleDir <- file.path("C:/Celine/spadesWorkshopFeb2018")
inputDir <- file.path(moduleDir, "inputs") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
modules <- list("speciesAbundance", "temperature", "speciesTempLM")
## Set simulation and module parameters
times <- list(start = 1.0, end = 10.1, timeunit = "year")
parameters <- list(
.globals = list(simulationTimeStep = 1, .plotInitialTime = 1.5),
speciesTempLM = list(statsTimestep = 5)
)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
library(igraph)
library(SpaDES.core)
moduleDir <- file.path("C:/Celine/spadesWorkshopFeb2018")
inputDir <- file.path(moduleDir, "inputs") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
modules <- list("speciesAbundance", "temperature", "speciesTempLM")
## Set simulation and module parameters
times <- list(start = 1.0, end = 10.1, timeunit = "year")
parameters <- list(
.globals = list(simulationTimeStep = 1, .plotInitialTime = 1.5),
speciesTempLM = list(statsTimestep = 5)
)
## Simulation setup
mySim <- simInit(times = times, params = parameters, modules = moduleDir,
objects = objects, paths = paths)
library(igraph)
library(SpaDES.core)
moduleDir <- file.path("C:/Celine/spadesWorkshopFeb2018")
inputDir <- file.path(moduleDir, "inputs") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
modules <- list("speciesAbundance", "temperature", "speciesTempLM")
## Set simulation and module parameters
times <- list(start = 1.0, end = 10.1, timeunit = "year")
parameters <- list(
.globals = list(simulationTimeStep = 1, .plotInitialTime = 1.5),
speciesTempLM = list(statsTimestep = 5)
)
## Simulation setup
mySim <- simInit(times = times, params = parameters, modules = moduleDir,
objects = objects, paths = paths)
simOut <- spades(mySim)
library(SpaDES)
moduleDir <- file.path("C:/Celine/GitHub/spadesCBM")
inputDir <- file.path("C:/Celine/GitHub/data/12_Spades_run") %>% reproducible::checkPath(create = TRUE)
outputDir <- file.path("C:/Celine/SpaDEScacheOutputs/outputs")
cacheDir <- file.path("C:/Celine/SpaDEScacheOutputs/cache")
times <- list(start = 1990.00, end = 1999.00)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
spadesCBMcore = list(.useCache = c(".inputObjects", "init")),
spadesCBMinputs = list(.useCache = c(".inputObjects")),
spadesCBMdefaults = list(.useCache = c(".inputObjects"))
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("spadesCBM")
objects <- list(
dbPath = file.path(inputDir,"cbm_defaults","cbm_defaults.db"),
sqlDir = file.path(inputDir,"cbm_defaults")
)
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
spadesCBMSim <- simInit(times = times, params = parameters,
modules = modules,
objects = objects, paths = paths)
spadesCBMout <- spades(spadesCBMSim,debug=TRUE)
library((SpaDES.shiny))
install.packages("SpaDES.shiny")
spadesCBMout@.envir
library(SpaDES)
?SpaDES.tools
viewCache(spadesCBMout)
library(reproducible)
showCache(spadesCBMout)
showCache(userTags = "spades")
showCache(userTags = "spades")
?showCache
microbenchmark::microbenchmark(
loop = {
a <- vector()
for (i in 1:1000) a[i] <- runif(1)
},
vectorized = { a <- runif(1000) }
)
install.packages("microbenchmark")
library(microbenchmark)
microbenchmark::microbenchmark(
loop = {
a <- vector()
for (i in 1:1000) a[i] <- runif(1)
},
vectorized = { a <- runif(1000) }
)
profvis::profvis({spadesCBMout <- spades(spadesCBMSim,debug=TRUE)})
clearCache()
profvis::profvis({spadesCBMout <- spades(spadesCBMSim,debug=TRUE)})
events(spadesCBMout)
events(spadesCBMSim)
